* 日本語プログラミング開発計画メモ 2014-10-06 中鉢
** 開発方針
*** 言語開発の流れブーターの開発方針
   - ブーターをJava 等で使る
     - Javaが最適かどうかは議論の余地あり
   - 後は全部日本語で作る方法をとる

*** 評価
   - 日本語なら大岩先生も書いてみたい
   - コーディング能力が高くない人に書いてもらう

*** ネーミング
   - 言霊でいいのか
     - TBD

* タイルスクリプトのアプローチ

- 関連研究
  - [[http://ieeexplore.ieee.org/xpl/articleDetails.jsp?reload=true&arnumber=4459482][IEEE Xplore Abstract - Toward A More Scalable End-User Scripting Language]]
  - [[http://ci.nii.ac.jp/naid/110009660234][CiNii 論文 -  ビジュアル-Java相互変換によるシームレスな言語移行を指向したプログラミング学習環境の提案と評価]]

- OpenBlocks
  - [[http://dspace.mit.edu/handle/1721.1/41550][DSpace@MIT: OpenBlocks : an extendable framework for graphical block programming systems]]
  - [[http://education.mit.edu/openblocks][Open Blocks Download Page | MIT STEP]]
  - [[https://github.com/mikaelhg/openblocks][mikaelhg/openblocks]]

* 修士論文のアプローチ
** 正規表現を用いたインタープリター

*** 日本語による表現
トマトとりんごの値段を合計する

*** パース
正規表現でプログラムをパース

*** 意味
Rubyで記述

** 成功例

#+begin_src ruby
input = "トマトとりんごの値段を合計する"
pattern = %r{(?<o1>.*)と(?<o2>.*)の(?<f1>.*)を(?<v1>.*する)}
result = pattern.match(input)
p result[:o1], result[:o2], result[:f1], result[:v1]
#+end_src

#+RESULTS:
| トマト | りんご | 値段 | 合計する |

** 失敗例

#+begin_src ruby
input = "しおとさとうの値段を合計する"
pattern = %r{(?<o1>.*)と(?<o2>.*)の(?<f1>.*)を(?<v1>.*する)}
result = pattern.match(input)
p result[:o1], result[:o2], result[:f1], result[:v1]
#+end_src

#+RESULTS:
| しおとさ | う | 値段 | 合計する |

** 解決方法
   - 辞書を用いる
     - 変数定義時に辞書に登録し，この情報を用いてパースする
     - 「しお」と「さとう」は分離しないようにする


* 敷島日本語表現
** 敷島日本語表現(1)

#+begin_src ruby
input = "オブジェクトpをクラスCとして作る。"
pattern = %r{オブジェクト(?<o>.*)をクラス(?<c>.*)として作る。}
result = pattern.match(input)
"#{result[:o]} = new #{result[:c]}();"
#+end_src

#+RESULTS:
: p = new C();

   - クラスのコンストラクタへの引数は？

** 敷島日本語表現(2)

#+begin_src ruby
input = "pを100歩進める。"
pattern = %r{(?<o>.*)を(?<p>.*)歩(?<m>.*)。}
result = pattern.match(input)
"#{result[:o]}.#{result[:m]}(#{result[:p]})"
#+end_src

#+RESULTS:
: p.進める(100)

   - 助数詞「歩」の取り扱い？

** 敷島日本語表現(3)

#+begin_src ruby
input = "xとyをfしてzにする。"
pattern = %r{(?<p1>.*)と(?<p2>.*)を(?<m>.*)して(?<r>.*)にする。}
result = pattern.match(input)
"#{result[:r]}.#{result[:m]}(#{result[:p1]}, #{result[:p2]})"
#+end_src

#+RESULTS:
: z.f(x, y)

   - 引数の数が増えた場合，正規表現の繰り返し規則で対応する？

* 課題
** 具象文法における括弧の扱い
  - 手続きの定義方法
    − （＜オブジェクト＞と＜オブジェクト＞）を＜・・・する＞
** テキストのパース
   - そもそもテキストをパースする必要があるのか？
   - 構造エディタ（structure editor）を利用する？
     - [[http://en.wikipedia.org/wiki/Structure_editor][Structure editor - Wikipedia, the free encyclopedia]]
     - タイルスクリプトのGUIエディタもstructure editor
   - XML（YAML）等のマークアップ言語を活用する？

* その他（未整理）
** 具象文法と抽象文法の完全分離
   - 多自然言語によるプログラム表現
     - multi natural language
     - 共通の抽象文法を持つものの，具象文法はマルチに設定できる

** 基礎的な単語の翻訳
   - Array -> 配列
   - Hash -> 辞書? 索引?
   - List -> 一覧?

** 概念辞書を動的に構築できる言語
   - 概念構築に基づくプログラミング

     1. 「加算」という概念を辞書に登録する
     2. 辞書からIDが反る
     3. IDを指定して「Add」を登録する
     4. IDを指定して意味を登録する

** 「やまと言葉」でプログラミング
   - 英語から翻訳した漢語ではではなく，
     平易なやまと言葉でプログラミングできないか


